$padding-inputs: 10px 20px;

.form {
  margin: auto 0;
  width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 10px;
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    margin: auto 0;
    text-align: left;
  }
}

.formRow {
  width: 100%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 10px;
}

.formTitle {
  margin: auto 0;
  text-align: left;
}

.formSpan {
  margin: auto 0;
  text-align: left;
  font-family: var(--font-primary);
  font-size: var(--fontsize-small);
}

.formBtnSubmit {
  cursor: pointer;
  overflow: hidden;
  position: relative;
  background-color: transparent;
  padding: 0;
  transition: filter 0.2s;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-content: flex-start;
  border: var(--localBorderSizeOfBtns) solid var(--localBorderColorOfBtns);
  border-radius: var(--localBorderRadiusOfBtns);
  .btnBg {
    background-color: var(--localBgColorOfSubmit);
    backdrop-filter: var(--localBackdropFilter);
    display: block;
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    top: 0;
  }
  .btnText {
    color: var(--localTextColorOfSubmit);
    position: relative;
    display: block;
    font-family: var(--localFontFamilyOfBtns);
    font-size: var(--localFontSizeOfBtns);
    font-weight: var(--localFontWeightOfBtns);
    padding: var(--localPaddingOfBtns);
  }
  &.bgHover {
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: transparent;
      transition: background-color 0.4s ease;
    }
    .btnText {
      transition: color 0.4s ease;
    }
  }
  &.cfLeft {
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: var(--localBgHoverBorderRadius);
      background-color: var(--localBgColorOnHoverOfSubmit);
      transform: translateX(-105%);
      transition: transform 0.4s ease;
    }
    .btnText {
      background: linear-gradient(
        to right,
        var(--localTextColorOnHoverOfSubmit) 50%,
        var(--localBgColorOfBtns) 50%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: background-position 0.4s ease;
      background-size: 200% 100%;
      background-position: 100% 0;
    }
  }
  &.cfRight {
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: var(--localBgHoverBorderRadius);
      background-color: var(--localBgColorOnHoverOfSubmit);
      transform: translateX(105%);
      transition: transform 0.4s ease;
    }
    .btnText {
      background: linear-gradient(
        to right,
        var(--localTextColorOnHoverOfSubmit) 50%,
        var(--localBgColorOfBtns) 50%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: background-position 0.4s ease;
      background-size: 200% 100%;
      background-position: -100% 0;
    }
  }
  &.cfBottom {
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: var(--localBgHoverBorderRadius);
      background-color: var(--localBgColorOnHoverOfSubmit);
      transform: translateY(105%);
      transition: transform 0.4s ease;
    }
    .btnText {
      background: linear-gradient(
        to bottom,
        var(--localTextColorOnHoverOfSubmit) 50%,
        var(--localBgColorOfBtns) 50%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: background-position 0.4s ease;
      background-size: 100% 200%;
      background-position: 0 -100%;
    }
  }
  &.cfTop {
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: var(--localBgHoverBorderRadius);
      background-color: var(--localBgColorOnHoverOfSubmit);
      transform: translateY(-105%);
      transition: transform 0.4s ease;
    }
    .btnText {
      background: linear-gradient(
        to bottom,
        var(--localTextColorOnHoverOfSubmit) 50%,
        var(--localBgColorOfBtns) 50%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: background-position 0.4s ease;
      background-size: 100% 200%;
      background-position: 0 100%;
    }
  }
  &.brc {
    transition: border-radius 0.4s ease;
    .btnBg::before {
      content: "";
      position: absolute; /* Ensure it is positioned relative to its parent */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: transparent;
      transition: background-color 0.4s ease;
    }
    .btnText {
      transition: color 0.1s ease;
    }
  }
  &.scaleForward {
    transition: transform 0.4s ease;
  }
  &.scaleBackward {
    transition: transform 0.4s ease;
  }
}

.formFieldset {
  flex: 1 1 25%;
  width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  height: min-content;
  /*
  LABELS
  #F0F
  */
  .formLabel {
    font-family: var(--localFontFamilyOfLabels);
    font-size: var(--localFontSizeOfLabels);
    font-weight: var(--localFontWeightOfLabels);
    color: var(--localTextColorOfLabels);
    padding: var(--localPaddingOfLabels);
    background-color: var(--localBgColorOfLabels);
    border-radius: var(--localBorderRadiusOfLabels);
    .requiredStar {
      color: var(--color-error);
    }
    &.above {
      margin: 0;
      text-align: left;
    }
    &:has(+ .inputContainer),
    &:has(+ .textAreaContainer) {
      &.floating {
        left: 5px;
        position: absolute;
        z-index: 20;
        top: 50%;
        white-space: nowrap;
        transform: translateY(-50%);
        transition: top 0.4s ease-in-out, color 0.4s ease-in-out;
        pointer-events: none;
        width: min-content;
        &.active {
          top: -10%;
        }
      }
    }
    &:has(+ .selectContainer),
    &:has(+ .multiSelectContainer),
    &:has(+ .multiCheckboxContainer) {
      &.floating {
        margin: 0;
        text-align: left;
      }
    }
  }
  /*
  INPUT
  #F0F
  */
  .inputContainer {
    position: relative;
    width: 100%;
    .formInput {
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      -webkit-box-sizing: border-box;
      width: 100%;
      outline: none;
      transition: border 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
      font-family: var(--localFontFamilyOfValues);
      font-size: var(--localFontSizeOfValues);
      font-weight: var(--localFontWeightOfValues);
      color: var(--localTextColorOfValues);
      padding: var(--localPaddingOfContainers);
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      border: var(--localBorderSizeOfContainers) solid
        var(--localBorderColorOfContainers);
      &:focus {
        box-shadow: var(--localBoxShadowOnFocusOfContainers);
      }
      &::placeholder {
        font-family: var(--localFontFamilyOfPlaceholders);
        font-size: var(--localFontSizeOfPlaceholders);
        font-weight: var(--localFontWeightOfPlaceholders);
        color: var(--localTextColorOfPlaceholders);
      }
    }
    .hintIcon {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      transition: fill 0.4s ease-in-out;
      fill: var(--shadow-25);
      background-color: var(--localBgColorOfContainers);
      border-radius: 100%;
      cursor: pointer;
    }
    .hintText {
      position: absolute;
      font-family: var(--font-secondary);
      color: var(--color-text);
      font-size: var(--fontsize-small);
      background-color: var(--color-background);
      padding: 10px 10px;
      border-radius: 5px;
      top: 50%;
      transform: translateY(-50%);
      right: 30px;
      box-shadow: 0px 0px 5px var(--color-boxshadow);
      z-index: 100;
      display: none;
      text-align: left;
      white-space: pre-wrap;
    }
    .hintIcon:hover + .hintText, /* Show hint on hover */
    .hintIcon:focus + .hintText,
    .hintText:hover {
      /* Or on click/focus for accessibility */
      display: block; /* Display the hint text when the icon is hovered or clicked */
    }
  }
  &.notValid .inputContainer {
    .formInput {
      border: var(--localBorderSizeOfContainers) solid var(--color-error);
    }
    .hintIcon {
      fill: var(--color-error);
    }
  }
  /*
  TEXTAREA
  #F0F
  */
  .textAreaContainer {
    position: relative;
    width: 100%;
    .formTextArea {
      resize: vertical;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      -webkit-box-sizing: border-box;
      width: 100%;
      outline: none;
      transition: border 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
      font-family: var(--localFontFamilyOfValues);
      font-size: var(--localFontSizeOfValues);
      font-weight: var(--localFontWeightOfValues);
      color: var(--localTextColorOfValues);
      padding: var(--localPaddingOfContainers);
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      border: var(--localBorderSizeOfContainers) solid
        var(--localBorderColorOfContainers);
      &:focus {
        box-shadow: var(--localBoxShadowOnFocusOfContainers);
      }
      &::placeholder {
        font-family: var(--localFontFamilyOfPlaceholders);
        font-size: var(--localFontSizeOfPlaceholders);
        font-weight: var(--localFontWeightOfPlaceholders);
        color: var(--localTextColorOfPlaceholders);
      }
    }
    .hintIcon {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      transition: fill 0.4s ease-in-out;
      fill: var(--shadow-25);
      background-color: var(--localBgColorOfContainers);
      border-radius: 100%;
      cursor: pointer;
    }
    .hintText {
      position: absolute;
      font-family: var(--font-secondary);
      color: var(--color-text);
      font-size: var(--fontsize-small);
      background-color: var(--color-background);
      padding: 10px 10px;
      border-radius: 5px;
      top: 50%;
      transform: translateY(-50%);
      right: 30px;
      box-shadow: 0px 0px 5px var(--color-boxshadow);
      z-index: 100;
      display: none;
      text-align: left;
      white-space: pre-wrap;
    }
    .hintIcon:hover + .hintText, /* Show hint on hover */
    .hintIcon:focus + .hintText,
    .hintText:hover {
      /* Or on click/focus for accessibility */
      display: block; /* Display the hint text when the icon is hovered or clicked */
    }
  }
  &.notValid .textAreaContainer {
    .formTextArea {
      border: var(--localBorderSizeOfContainers) solid var(--color-error);
    }
    .hintIcon {
      fill: var(--color-error);
    }
  }
  /*
  SELECT
  #F0F
  */
  .selectContainer {
    position: relative;
    width: 100%;
    .formSelect {
      overflow: hidden;
      box-sizing: border-box;
      width: 100%;
      outline: none;
      transition: border-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
      min-height: 40px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      text-align: left;
      cursor: pointer;
      position: relative;
      -webkit-user-select: none;
      -ms-user-select: none;
      user-select: none;
      font-family: var(--localFontFamilyOfValues);
      font-size: var(--localFontSizeOfValues);
      font-weight: var(--localFontWeightOfValues);
      color: var(--localTextColorOfValues);
      padding: var(--localPaddingOfContainers);
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      border: var(--localBorderSizeOfContainers) solid
        var(--localBorderColorOfContainers);
      &:focus,
      &.open {
        box-shadow: var(--localBoxShadowOnFocusOfContainers);
      }
      .dropdownIcon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        transition: transform 0.4s ease-in-out;
        fill: var(--shadow-25);
        cursor: pointer;
      }
      &.open .dropdownIcon {
        transform: translateY(-50%) rotateZ(-180deg);
      }
    }
    .optionsList {
      position: absolute;
      top: calc(100% + 1px);
      left: 0;
      width: 100%;
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      box-shadow: var(--localBoxShadowOnFocusOfDropdowns);
      max-height: 350px;
      overflow-y: auto;
      z-index: 10;
      .option {
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        text-align: left;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: var(--localFontFamilyOfValues);
        font-size: var(--localFontSizeOfValues);
        font-weight: var(--localFontWeightOfValues);
        color: var(--localTextColorOfValues);
        padding: var(--localPaddingOfValues);
        background-color: var(--localBgColorOfValues);
        &.selected {
          background-color: var(--localBgColorOfSelected);
          color: var(--localTextColorOfSelected);
        }
      }
    }
    .hintIcon {
      position: absolute;
      right: 40px;
      top: 50%;
      transform: translateY(-50%);
      fill: var(--shadow-25);
      background-color: var(--localBgColorOfContainers);
      border-radius: 100%;
      cursor: pointer;
    }
    .hintText {
      position: absolute;
      font-family: var(--font-secondary);
      color: var(--color-text);
      font-size: var(--fontsize-small);
      background-color: var(--color-background);
      padding: 10px 10px;
      border-radius: 5px;
      top: 50%;
      transform: translateY(-50%);
      right: 55px;
      box-shadow: 0px 0px 5px var(--color-boxshadow);
      z-index: 100;
      display: none;
      text-align: left;
      white-space: pre-wrap;
    }
    .hintIcon:hover + .hintText, /* Show hint on hover */
    .hintIcon:focus + .hintText,
    .hintText:hover {
      /* Or on click/focus for accessibility */
      display: block; /* Display the hint text when the icon is hovered or clicked */
    }
  }
  /*
  MULTISELECT
  #F0F
  */
  .multiSelectContainer {
    position: relative;
    width: 100%;
    .formMultiSelect {
      overflow: hidden;
      box-sizing: border-box;
      width: 100%;
      outline: none;
      transition: border-color 0.4s ease-in-out, box-shadow 0.4s ease-in-out;
      min-height: 40px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      text-align: left;
      cursor: pointer;
      position: relative;
      -webkit-user-select: none;
      -ms-user-select: none;
      user-select: none;
      font-family: var(--localFontFamilyOfValues);
      font-size: var(--localFontSizeOfValues);
      font-weight: var(--localFontWeightOfValues);
      color: var(--localTextColorOfValues);
      padding: var(--localPaddingOfContainers);
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      border: var(--localBorderSizeOfContainers) solid
        var(--localBorderColorOfContainers);
      &:focus,
      &.open {
        box-shadow: var(--localBoxShadowOnFocusOfContainers);
      }
      .dropdownIcon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        transition: transform 0.4s ease-in-out;
        fill: var(--shadow-25);
        cursor: pointer;
      }
      &.open .dropdownIcon {
        transform: translateY(-50%) rotateZ(-180deg);
      }
    }
    .optionsList {
      position: absolute;
      top: calc(100% + 1px);
      left: 0;
      width: 100%;
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      box-shadow: var(--localBoxShadowOnFocusOfDropdowns);
      max-height: 350px;
      overflow-y: auto;
      z-index: 10;
      .option {
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        text-align: left;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: var(--localFontFamilyOfValues);
        font-size: var(--localFontSizeOfValues);
        font-weight: var(--localFontWeightOfValues);
        color: var(--localTextColorOfValues);
        padding: var(--localPaddingOfValues);
        background-color: var(--localBgColorOfValues);
        &.selected {
          background-color: var(--localBgColorOfSelected);
          color: var(--localTextColorOfSelected);
        }
      }
    }
    .hintIcon {
      position: absolute;
      right: 40px;
      top: 50%;
      transform: translateY(-50%);
      fill: var(--shadow-25);
      background-color: var(--localBgColorOfContainers);
      border-radius: 100%;
      cursor: pointer;
    }
    .hintText {
      position: absolute;
      font-family: var(--font-secondary);
      color: var(--color-text);
      font-size: var(--fontsize-small);
      background-color: var(--color-background);
      padding: 10px 10px;
      border-radius: 5px;
      top: 50%;
      transform: translateY(-50%);
      right: 55px;
      box-shadow: 0px 0px 5px var(--color-boxshadow);
      z-index: 100;
      display: none;
      text-align: left;
      white-space: pre-wrap;
    }
    .hintIcon:hover + .hintText, /* Show hint on hover */
    .hintIcon:focus + .hintText,
    .hintText:hover {
      /* Or on click/focus for accessibility */
      display: block; /* Display the hint text when the icon is hovered or clicked */
    }
  }
  /*
  MULTICHECKBOX
  #F0F
  */
  .multiCheckboxContainer {
    position: relative;
    width: 100%;
    .formMultiCheckbox {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      gap: 1rem;
      max-height: 350px;
      overflow-y: auto;
      z-index: 10;
      font-family: var(--localFontFamilyOfValues);
      font-size: var(--localFontSizeOfValues);
      font-weight: var(--localFontWeightOfValues);
      color: var(--localTextColorOfValues);
      padding: var(--localPaddingOfContainers);
      background-color: var(--localBgColorOfContainers);
      border-radius: var(--localBorderRadiusOfContainers);
      border: var(--localBorderSizeOfContainers) solid
        var(--localBorderColorOfContainers);
      .option {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin: 0;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        text-align: left;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-family: var(--localFontFamilyOfValues);
        font-size: var(--localFontSizeOfValues);
        font-weight: var(--localFontWeightOfValues);
        padding: var(--localPaddingOfValues);
        background-color: var(--localBgColorOfValues);
        border-radius: var(--localBorderRadiusOfContainers);
        &:not(.selected) {
          color: var(--localTextColorOfUnselected);
        }
        &.selected {
          background-color: var(--localBgColorOfSelected);
          color: var(--localTextColorOfSelected);
        }
        .symbol {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 10px;
          height: 10px;
          position: relative;
          /* Horizontal line (always visible) */
          span:first-child {
            width: 10px;
            height: 2px;
            background-color: var(--color-ascent);
            position: absolute;
          }
          /* Vertical line (rotates behind the horizontal) */
          span:last-child {
            width: 2px;
            height: 10px;
            background-color: var(--color-ascent);
            position: absolute;
            transition: transform 0.3s ease-in-out;
          }
          &.checked span:last-child {
            transform: rotateZ(-90deg);
          }
        }
      }
    }
    .hintIcon {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      fill: var(--shadow-25);
      background-color: var(--localBgColorOfContainers);
      border-radius: 100%;
      cursor: pointer;
    }
    .hintText {
      position: absolute;
      font-family: var(--font-secondary);
      color: var(--color-text);
      font-size: var(--fontsize-small);
      background-color: var(--color-background);
      padding: 10px 10px;
      border-radius: 5px;
      top: 50%;
      transform: translateY(-50%);
      right: 30px;
      box-shadow: 0px 0px 5px var(--color-boxshadow);
      z-index: 100;
      display: none;
      text-align: left;
      white-space: pre-wrap;
    }
    .hintIcon:hover + .hintText, /* Show hint on hover */
    .hintIcon:focus + .hintText,
    .hintText:hover {
      /* Or on click/focus for accessibility */
      display: block; /* Display the hint text when the icon is hovered or clicked */
    }
  }
}
/*
  PICKER
  #F0F
  */
.formPicker {
  flex: 1 1 25%;
  width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  height: min-content;
  .formLabel {
    margin: 0;
    text-align: left;
    font-family: var(--localFontFamilyOfLabels);
    font-size: var(--localFontSizeOfLabels);
    font-weight: var(--localFontWeightOfLabels);
    color: var(--localTextColorOfLabels);
    padding: var(--localPaddingOfLabels);
    background-color: var(--localBgColorOfLabels);
    border-radius: var(--localBorderRadiusOfLabels);
  }
  .pickerContainer {
    position: relative;
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 1rem;
    .formPickerOption {
      flex: 1 1 10%;
      cursor: pointer;
      font-family: var(--localFontFamilyOfBtns);
      font-size: var(--localFontSizeOfBtns);
      font-weight: var(--localFontWeightOfBtns);
      color: var(--localTextColorOfPicker);
      padding: var(--localPaddingOfBtns);
      background-color: var(--localBgColorOfPicker);
      border-radius: var(--localBorderRadiusOfBtns);
      border: var(--localBorderSizeOfBtns) solid var(--localBorderColorOfBtns);
      &.picked {
        color: var(--localTextColorOnPickedOfPicker);
        background-color: var(--localBgColorOnPickedOfPicker);
      }
    }
  }
}

/*
  MEDIA
  #F0F
  */
@media only screen and (pointer: fine) {
  .selectContainer {
    .optionsList {
      .option:hover {
        background-color: var(--localBgColorOnHoverOfValues);
      }
    }
  }
  .multiSelectContainer {
    .optionsList {
      .option:hover {
        background-color: var(--localBgColorOnHoverOfValues);
      }
    }
  }
  .multiCheckboxContainer {
    .formMultiCheckbox {
      .option:hover {
        background-color: var(--localBgColorOnHoverOfValues);
      }
    }
  }
  .formBtnSubmit {
    &:hover {
      filter: var(--localFilter);
    }
    &.bgHover:hover {
      .btnBg::before {
        background-color: var(--localBgColorOnHoverOfSubmit);
      }
      .btnText {
        color: var(--localTextColorOnHoverOfSubmit);
      }
    }
    &.cfLeft:hover {
      .btnText {
        background-position: 0 0;
      }
      .btnBg::before {
        transform: translateX(0);
      }
    }
    &.cfRight:hover {
      .btnText {
        background-position: 0 0;
      }
      .btnBg::before {
        transform: translateX(0);
      }
    }
    &.cfBottom:hover {
      .btnText {
        background-position: 0 0;
      }
      .btnBg::before {
        transform: translateY(0);
      }
    }
    &.cfTop:hover {
      .btnText {
        background-position: 0 0;
      }
      .btnBg::before {
        transform: translateY(0);
      }
    }
    &.brc:hover {
      border-radius: var(--localBorderHoverRadius);
      .btnBg::before {
        background-color: var(--localBgColorOnHoverOfSubmit);
      }
      .btnText {
        color: var(--localTextColorOnHoverOfSubmit);
      }
    }
    &.scaleForward:hover {
      transform: scale(1.1);
    }
    &.scaleBackward:hover {
      transform: scale(0.9);
    }
  }
  .formPicker {
    .pickerContainer {
      .formPickerOption:not(.picked):hover {
        color: var(--localTextColorOnHoverOfPicker);
        background-color: var(--localBgColorOnHoverOfPicker);
      }
    }
  }
}
